using System.Collections.Generic;
using System.Linq;
using TaskOperator.Core;
using TaskOperator.DAL.UnitOfWork;
using TaskOperator.Entities;

namespace TaskOperator.DAL.Repository
{
    public class UserRepository
    {
        private readonly IEntityFrameworkUnitOfWork _unitOfWork;

        public UserRepository(IUnitOfWork unitOfWork)
        {
            _unitOfWork = (IEntityFrameworkUnitOfWork)unitOfWork;
        }

        public User GetUser(int id)
        {
            return _unitOfWork.GetContext().User.SingleOrDefault(u => u.Id == id);
        }

        public User GetUser(string username)
        {
            return _unitOfWork.GetContext().User.SingleOrDefault(u => u.Username == username);
        }

        public bool UserExists(string username)
        {
            return _unitOfWork.GetContext().User.Any(u => u.Username == username);
        }

        public void AddUser(User user)
        {
            _unitOfWork.GetContext().User.Add(user);
            _unitOfWork.GetContext().SaveChanges();
        }

        public bool IsFreeWorker(User user)
        {
            return _unitOfWork.GetContext().Task.All(t => t.WorkerId != user.Id) && !user.IsManager;
        }

        public IEnumerable<User> GetFreeWorkers()
        {
            return _unitOfWork.GetContext().User
                .Where(u => u.Task.Count == 0 && !u.IsManager).ToArray();
        }
    }
}
